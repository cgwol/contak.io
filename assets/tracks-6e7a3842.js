import{h as w,s as o,i as u}from"./index-88cc3bb7.js";const f=async(a,r)=>{const{data:t,error:e}=await o.storage.from("tracks").upload(`${a}/${r.name}`,r,{upsert:!0});if(e)throw e;return t},l=async(a,r)=>{const t=5*u.MB;if(r.size>=t)throw new Error(`Audio files cannot be larger than 5 MB, file was ${w(r.size)}`);const{data:e,error:s}=await o.from("owned_tracks").insert({track_name:a}).select().maybeSingle();if(s)throw s;return await f(e.track_id,r),e},_=async(a,r,t)=>{const{data:e,error:s}=await o.from("public_users").select("user_type, user_id").eq("username",r).maybeSingle();if(s)throw s;if(!e)throw new Error(`Cannot find user "${r}"`);const{user_type:i,user_id:c}=e;if(i!=="Creator")throw new Error(`User ${r} is not a Creator`);const{data:d,error:n}=await o.from("track_creators").upsert({track_id:a,creator_id:c,is_owner:t,deleted_at:"infinity"},{onConflict:"track_id,creator_id"});if(n)throw n;return d},m=async(a,r)=>{const{data:t,error:e}=await o.from("owned_tracks").update({track_name:r}).eq("track_id",a);if(e)throw e;return t},h=async a=>{const{data:r,error:t}=await o.storage.from("tracks").remove([a]);if(t)throw t;return r},p=async a=>{const{data:r,error:t}=await o.from("owned_tracks").delete().eq("track_id",a);if(t)throw t;return r},y=async a=>{const{data:r,error:t}=await o.from("owned_tracks").update({deleted_at:"infinity"}).eq("track_id",a);if(t)throw t;return r};export{l as a,_ as b,f as c,p as d,h as e,y as r,m as u};
